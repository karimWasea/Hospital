// <auto-generated />
using System;
using Dataaccesslayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dataaccesslayer.Migrations
{
    [DbContext(typeof(ApplicationDBcontext))]
    [Migration("20230820110712_bb")]
    partial class bb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dataaccesslayer.Apointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("AppointmentConfirmation")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("discreaption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Apointment");
                });

            modelBuilder.Entity("Dataaccesslayer.Bill", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Chargedoctor")
                        .HasColumnType("int");

                    b.Property<decimal>("Chargemedicine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Insuranceid")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("Nofdayes")
                        .HasColumnType("int");

                    b.Property<decimal>("Optioncharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Roomcharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("advanc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("labcharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("neringcharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("numberbill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("totalbill")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("Insuranceid");

                    b.HasIndex("patientId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Dataaccesslayer.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("hospitalid")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("hospitalid");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Dataaccesslayer.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Hospitalid")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("discraption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Hospitalid");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Dataaccesslayer.DoctorAppointmentVIsit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("VisitType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisiteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisiteNotebydoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patientid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("visitStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("patientid");

                    b.ToTable("DoctorAppointmentVIsit");
                });

            modelBuilder.Entity("Dataaccesslayer.DoctorDaywork", b =>
                {
                    b.Property<int>("DoctorDayworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorDayworkId"));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormalStartingShift")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("WeekDaystId")
                        .HasColumnType("int");

                    b.HasKey("DoctorDayworkId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("WeekDaystId");

                    b.ToTable("doctorDayworks");
                });

            modelBuilder.Entity("Dataaccesslayer.DoctorTimingShift", b =>
                {
                    b.Property<int>("DoctorTimingShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorTimingShiftId"));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("TimingShiftId")
                        .HasColumnType("int");

                    b.HasKey("DoctorTimingShiftId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TimingShiftId");

                    b.ToTable("DoctorTimingShift");
                });

            modelBuilder.Entity("Dataaccesslayer.Hospital", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Dataaccesslayer.Insurance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Enddate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("pplicynumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("startdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("Dataaccesslayer.Lab", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("bloodpressur")
                        .HasColumnType("int");

                    b.Property<int>("hight")
                        .HasColumnType("int");

                    b.Property<string>("labnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patientid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("temprature")
                        .HasColumnType("int");

                    b.Property<string>("testcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("testresult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("testtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("wight")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("patientid");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("Dataaccesslayer.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Coust")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("discreaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expireddate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("prouductiondate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Dataaccesslayer.MedicineReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expireddate")
                        .HasColumnType("datetime2");

                    b.Property<int>("medicineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("prouductiondate")
                        .HasColumnType("datetime2");

                    b.Property<int>("suplierid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("medicineId");

                    b.HasIndex("suplierid");

                    b.ToTable("MedicineReport");
                });

            modelBuilder.Entity("Dataaccesslayer.PatientHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryOfPresentIllness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("bit");

                    b.Property<string>("LabResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHistory");
                });

            modelBuilder.Entity("Dataaccesslayer.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stuts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("hospitalid")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("hospitalid");

                    b.ToTable("GetRooms");
                });

            modelBuilder.Entity("Dataaccesslayer.TimingShifts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Endsifit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("Stutus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("startshift")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("TimingShifts");
                });

            modelBuilder.Entity("Dataaccesslayer.WeekDays", b =>
                {
                    b.Property<int>("WeekDaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeekDaysId"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("StartingPmShift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StratingAmShafit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekDaysName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeekDaysId");

                    b.ToTable("weekDays");
                });

            modelBuilder.Entity("Dataaccesslayer.patientreport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("dignouses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("doctorid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("patientid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.ToTable("Patientreports");
                });

            modelBuilder.Entity("Dataaccesslayer.payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accountantnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeIdId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<decimal>("Netsalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("bonassalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("compensalation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("hoursalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeIdId");

                    b.ToTable("GetPayrolls");
                });

            modelBuilder.Entity("Dataaccesslayer.prescribmedicine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("Medicineid")
                        .HasColumnType("int");

                    b.Property<int>("Patientreportid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Medicineid");

                    b.HasIndex("Patientreportid");

                    b.ToTable("Prescribmedicines");
                });

            modelBuilder.Entity("Dataaccesslayer.suplier", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Supliers");
                });

            modelBuilder.Entity("Dataaccesslayer.testprice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("billid")
                        .HasColumnType("int");

                    b.Property<int>("labid")
                        .HasColumnType("int");

                    b.Property<decimal>("tesstprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("testcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("billid");

                    b.HasIndex("labid");

                    b.ToTable("Testprices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dataaccesslayer.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contracturl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dateofbarth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Departmentid")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleRegeseter")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkingDaysinWeek")
                        .HasColumnType("int");

                    b.Property<string>("imphgurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("spicialist")
                        .HasColumnType("int");

                    b.Property<int>("statusDoctorInSystem")
                        .HasColumnType("int");

                    b.HasIndex("Departmentid");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Dataaccesslayer.Bill", b =>
                {
                    b.HasOne("Dataaccesslayer.Insurance", "Insurance")
                        .WithMany("bills")
                        .HasForeignKey("Insuranceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.ApplicationUser", "patient")
                        .WithMany()
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Dataaccesslayer.Contact", b =>
                {
                    b.HasOne("Dataaccesslayer.Hospital", "hospital")
                        .WithMany("Contacts")
                        .HasForeignKey("hospitalid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hospital");
                });

            modelBuilder.Entity("Dataaccesslayer.Department", b =>
                {
                    b.HasOne("Dataaccesslayer.Hospital", "Hospital")
                        .WithMany("departments")
                        .HasForeignKey("Hospitalid");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Dataaccesslayer.DoctorAppointmentVIsit", b =>
                {
                    b.HasOne("Dataaccesslayer.Apointment", "Appointment")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.ApplicationUser", "patient")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Dataaccesslayer.DoctorDaywork", b =>
                {
                    b.HasOne("Dataaccesslayer.ApplicationUser", "Doctor")
                        .WithMany("DoctorDayworks")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.WeekDays", "WeekDays")
                        .WithMany("DoctorDayworks")
                        .HasForeignKey("WeekDaystId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("WeekDays");
                });

            modelBuilder.Entity("Dataaccesslayer.DoctorTimingShift", b =>
                {
                    b.HasOne("Dataaccesslayer.ApplicationUser", "Doctor")
                        .WithMany("DoctorTimingShifts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.TimingShifts", "TimingShift")
                        .WithMany("DoctorTimingShifts")
                        .HasForeignKey("TimingShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("TimingShift");
                });

            modelBuilder.Entity("Dataaccesslayer.Lab", b =>
                {
                    b.HasOne("Dataaccesslayer.ApplicationUser", "patient")
                        .WithMany()
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Dataaccesslayer.MedicineReport", b =>
                {
                    b.HasOne("Dataaccesslayer.Medicine", "medicine")
                        .WithMany("medicineReports")
                        .HasForeignKey("medicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.suplier", "suplier")
                        .WithMany("medicines")
                        .HasForeignKey("suplierid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medicine");

                    b.Navigation("suplier");
                });

            modelBuilder.Entity("Dataaccesslayer.PatientHistory", b =>
                {
                    b.HasOne("Dataaccesslayer.ApplicationUser", "Patient")
                        .WithMany("Histories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Dataaccesslayer.Room", b =>
                {
                    b.HasOne("Dataaccesslayer.Hospital", "hospital")
                        .WithMany("Rooms")
                        .HasForeignKey("hospitalid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hospital");
                });

            modelBuilder.Entity("Dataaccesslayer.patientreport", b =>
                {
                    b.HasOne("Dataaccesslayer.ApplicationUser", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.ApplicationUser", "patient")
                        .WithMany()
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Dataaccesslayer.payroll", b =>
                {
                    b.HasOne("Dataaccesslayer.ApplicationUser", "EmployeId")
                        .WithMany()
                        .HasForeignKey("EmployeIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeId");
                });

            modelBuilder.Entity("Dataaccesslayer.prescribmedicine", b =>
                {
                    b.HasOne("Dataaccesslayer.Medicine", "Medicine")
                        .WithMany("prescribmedicines")
                        .HasForeignKey("Medicineid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.patientreport", "Patientreport")
                        .WithMany("Prescribmedicines")
                        .HasForeignKey("Patientreportid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Patientreport");
                });

            modelBuilder.Entity("Dataaccesslayer.testprice", b =>
                {
                    b.HasOne("Dataaccesslayer.Bill", "bill")
                        .WithMany()
                        .HasForeignKey("billid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dataaccesslayer.Lab", "lab")
                        .WithMany()
                        .HasForeignKey("labid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bill");

                    b.Navigation("lab");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dataaccesslayer.ApplicationUser", b =>
                {
                    b.HasOne("Dataaccesslayer.Department", null)
                        .WithMany("Employee")
                        .HasForeignKey("Departmentid");
                });

            modelBuilder.Entity("Dataaccesslayer.Apointment", b =>
                {
                    b.Navigation("DoctorAppointments");
                });

            modelBuilder.Entity("Dataaccesslayer.Department", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Dataaccesslayer.Hospital", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Rooms");

                    b.Navigation("departments");
                });

            modelBuilder.Entity("Dataaccesslayer.Insurance", b =>
                {
                    b.Navigation("bills");
                });

            modelBuilder.Entity("Dataaccesslayer.Medicine", b =>
                {
                    b.Navigation("medicineReports");

                    b.Navigation("prescribmedicines");
                });

            modelBuilder.Entity("Dataaccesslayer.TimingShifts", b =>
                {
                    b.Navigation("DoctorTimingShifts");
                });

            modelBuilder.Entity("Dataaccesslayer.WeekDays", b =>
                {
                    b.Navigation("DoctorDayworks");
                });

            modelBuilder.Entity("Dataaccesslayer.patientreport", b =>
                {
                    b.Navigation("Prescribmedicines");
                });

            modelBuilder.Entity("Dataaccesslayer.suplier", b =>
                {
                    b.Navigation("medicines");
                });

            modelBuilder.Entity("Dataaccesslayer.ApplicationUser", b =>
                {
                    b.Navigation("DoctorAppointments");

                    b.Navigation("DoctorDayworks");

                    b.Navigation("DoctorTimingShifts");

                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
